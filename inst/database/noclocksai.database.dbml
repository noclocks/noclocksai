Enum "auth"."confirmation_status" {
  "Unconfirmed"
  "Pending"
  "Expired"
  "Confirmed"
}

Enum "auth"."hash_algorithms" {
  "pbkdf2"
  "argon2id"
  "scrypt"
  "bcrypt"
  "sha256"
  "sha512"
  "md5"
}

Table "auth"."accounts" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "name" text [not null, note: 'Name of the account within the tenant']
  "status" text [not null, default: 'active', note: 'Status of the account (e.g., active, inactive, suspended)']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the account was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the account was last modified']
  Note: 'Represents accounts under a tenant organization'
}

Table "auth"."api_keys" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "user_id" uuid [note: 'Foreign key reference to the users table']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "key" text [unique, not null, note: 'Unique API key']
  "expires_at" timestamptz [note: 'Expiration timestamp for the API key']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the API key was created']
  Note: 'Stores API keys for programmatic access'
}

Table "auth"."apps" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "owner_id" uuid [note: 'Reference to the owner of the application']
  "name" text [not null, note: 'Name of the application']
  "description" text [note: 'Detailed description of the application']
  "client_id" text [unique, note: 'Unique client identifier for OAuth']
  "client_secret" text [note: 'Client secret for OAuth authentication']
  "redirect_uri" text [note: 'Redirect URI for OAuth']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the application was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the application was last modified']
  Note: 'Manages applications within a tenant organization'
}

Table "auth"."auth_templates" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "brand_id" uuid [note: 'Reference to the associated brand for styling']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "name" text [unique, not null, note: 'Unique name for the authentication template']
  "content" text [not null, note: 'HTML or templated content for the authentication page']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the template was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the template was last modified']
  Note: 'Stores reusable templates for authentication pages'
}

Table "auth"."brands" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "brandfetch_id" text [note: 'Unique identifier from Brandfetch API']
  "domain_id" uuid [note: 'Reference to the associated domain']
  "name" text [not null, note: 'Brand name']
  "description" text [note: 'Brand description']
  "company" jsonb [note: 'JSONB field containing details like company size, tagline']
  "industries" jsonb [note: 'Array of industries associated with the brand']
  "links" jsonb [note: 'JSONB field containing links to brandâ€™s website and social media']
  "logos" jsonb [note: 'JSONB field for brand logos']
  "colors" jsonb [note: 'JSONB field for brand colors']
  "fonts" jsonb [note: 'JSONB field for font specifications']
  "styles" jsonb [note: 'JSONB field for additional CSS or branding styles']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the brand record was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the brand record was last modified']
  Note: 'Stores branding details for tenant-specific configurations'
}

Table "auth"."domains" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "domain_name" text [unique, not null, note: 'Unique domain name associated with a tenant']
  "branding" jsonb [note: 'JSONB field for optional branding configurations']
  "email_settings" jsonb [note: 'JSONB field for email configuration settings like SMTP, DKIM']
  "auth_settings" jsonb [note: 'JSONB field for authentication settings (e.g., SSO)']
  "seo_settings" jsonb [note: 'SEO-related configurations stored as JSONB']
  "is_default" bool [default: false, note: 'Boolean indicating if this domain is the default for its tenant']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the domain was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the domain was last modified']
  Note: 'Stores domain-specific configurations and branding options for tenants'
}

Table "auth"."email_templates" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "brand_id" uuid [note: 'Reference to the associated brand']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "name" text [unique, not null, note: 'Unique name for the email template']
  "subject" text [not null, note: 'Subject line for the email template']
  "body_html" text [not null, note: 'HTML content of the email template']
  "body_text" text [note: 'Plain text content of the email template']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the template was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the template was last modified']
  Note: 'Defines reusable email templates'
}

Table "auth"."emails" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "user_id" uuid [note: 'Foreign key reference to the users table']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "to_email" text [not null, note: 'Recipient email address']
  "from_email" text [not null, note: 'Sender email address']
  "subject" text [not null, note: 'Email subject line']
  "body_html" text [note: 'HTML content of the email']
  "body_text" text [note: 'Plain text content of the email']
  "status" email_status [not null, default: 'pending', note: 'Delivery status of the email (e.g., pending, sent, bounced)']
  "email_template_id" uuid [note: 'Reference to the email template used']
  "resend_url" text [note: 'URL to resend the email if needed']
  "sent_at" timestamptz [default: `now()`, note: 'Timestamp when the email was sent']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the email record was created']
  Note: 'Tracks sent emails with references to templates and delivery status'
}

Table "auth"."errors" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "user_id" uuid [note: 'Foreign key reference to the users table']
  "error_type" text [not null, note: 'Type of error (e.g., email_failure, auth_failure)']
  "message" text [not null, note: 'Error message describing the issue']
  "details" jsonb [note: 'Additional details about the error in JSONB format']
  "occurred_at" timestamptz [default: `now()`, note: 'Timestamp when the error occurred']
  Note: 'Captures system errors for debugging and diagnostics'
}

Table "auth"."logs" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "user_id" uuid [note: 'Foreign key reference to the users table']
  "action" text [not null, note: 'Description of the action performed']
  "details" text [note: 'Additional details about the action']
  "object_id" uuid [note: 'Reference to the ID of the affected object']
  "object_type" text [note: 'Type of the affected object (e.g., email, user)']
  "ip_address" inet [note: 'IP address of the user performing the action']
  "user_agent" text [note: 'User agent string of the browser/device']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the log entry was created']
  Note: 'Tracks user actions and system events for auditing and diagnostics'
}

Table "auth"."notifications" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "user_id" uuid [note: 'Foreign key reference to the users table']
  "message" text [not null, note: 'Notification message']
  "read" bool [default: false, note: 'Read status of the notification']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the notification was created']

  Indexes {
    user_id [type: btree, name: "notifications_user_id_idx"]
  }
  Note: 'Stores user notifications'
}

Table "auth"."permissions" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "name" text [unique, not null, note: 'Unique name for each permission']
  "description" text [note: 'Detailed description of the permission']
  Note: 'Defines various permissions for role-based access control'
}

Table "auth"."profiles" {
  "user_id" uuid [pk, not null, note: 'Primary key and foreign key to the users table']
  "first_name" text [note: 'First name of the user']
  "last_name" text [note: 'Last name of the user']
  "avatar_url" text [note: '''URL to the user\'s avatar image''']
  "bio" text [note: 'Biography or description of the user']
  "preferences" jsonb [note: 'JSONB field for user preferences, e.g., theme or language']
  "metadata" jsonb [note: 'JSONB field for additional metadata']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the profile was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the profile was last modified']
  Note: 'Stores non-sensitive profile information for each user'
}

Table "auth"."rate_limits" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`]
  "tenant_id" uuid [not null]
  "limit_type" varchar [not null]
  "limit_path" varchar [not null, default: '/']
  "limit_period" int4 [not null]
  "limit_threshold" int4 [not null]
  "limit_window_start" timestamptz [not null]
  "limit_requests_count" int4 [not null, default: 0]
  "created_at" timestamptz [not null, default: `now()`]
  "modified_at" timestamptz [not null, default: `now()`]
}

Table "auth"."role_permissions" {
  "role_id" uuid [not null, note: 'Foreign key reference to the roles table']
  "permission_id" uuid [not null, note: 'Foreign key reference to the permissions table']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the role-permission association was created']

  Indexes {
    (role_id, permission_id) [type: btree, name: "role_permissions_pkey"]
  }
  Note: 'Associates roles with permissions for role-based access control'
}

Table "auth"."roles" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "name" text [unique, not null, note: 'Name of the role (e.g., Admin, User)']
  "description" text [note: '''Description of the role\'s purpose and permissions''']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the role was created']
  Note: 'Defines roles within the tenant for access control'
}

Table "auth"."scheduled_tasks" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid
  "task_name" text [not null, note: 'Name of the scheduled task']
  "description" text [note: 'Detailed description of the scheduled task']
  "task_type" text [not null, note: 'Type of task (e.g., email, cleanup)']
  "scheduled_for" timestamptz [not null, note: 'Scheduled timestamp for task execution']
  "status" text [not null, default: 'pending', note: 'Status of the scheduled task (e.g., pending, completed)']
  "details" jsonb [note: 'Additional details about the task in JSONB format']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the task was created']
  Note: 'Stores details of system tasks and schedules them for execution'
}

Table "auth"."service_accounts" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "name" text [not null, note: 'Name of the service account']
  "description" text [note: 'Description of the service account']
  "api_key_id" uuid [note: 'Reference to the API key used by this service account']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the service account was created']
  Note: 'Stores service accounts for automated or programmatic access'
}

Table "auth"."sessions" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "user_id" uuid [note: 'Foreign key reference to the users table']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "session_token" text [unique, not null, note: 'Unique token for session identification']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the session was created']
  "expires_at" timestamptz [not null, note: 'Expiration timestamp for the session']
  Note: 'Tracks active user sessions for authentication'
}

Table "auth"."tenants" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "name" text [unique, not null, note: 'Unique name for the tenant organization']
  "description" text [note: 'Detailed description of the tenant']
  "domain_id" uuid [note: 'Optional foreign key reference to the domains table']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the tenant was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the tenant was last modified']
  Note: 'Stores tenant organizations with optional domain association'
}

Table "auth"."user_roles" {
  "user_id" uuid [not null, note: 'Foreign key reference to the users table']
  "role_id" uuid [not null, note: 'Foreign key reference to the roles table']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the user-role association was created']

  Indexes {
    (user_id, role_id) [type: btree, name: "user_roles_pkey"]
  }
  Note: 'Associates users with roles for role-based access control'
}

Table "auth"."user_settings" {
  "user_id" uuid [pk, not null, note: 'Primary key and foreign key to the users table']
  "settings" jsonb [note: 'JSONB field containing customizable user settings']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the settings were created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the settings were last modified']
  Note: 'Stores customizable settings for each user as JSONB'
}

Table "auth"."users" {
  "id" uuid [pk, not null, default: `gen_random_uuid()`, note: 'Primary key as a UUID generated by gen_random_uuid()']
  "tenant_id" uuid [note: 'Foreign key reference to the tenants table']
  "email" text [unique, not null, note: 'Unique email address for the user']
  "status" user_status [not null, default: 'invited', note: 'Status of the user (e.g., invited, active, verified)']
  "invited_by" uuid [note: 'Reference to the user who sent the invitation']
  "last_login_at" timestamptz [note: 'Timestamp of the last login']
  "last_password_reset_at" timestamptz [note: 'Timestamp of the last password reset']
  "created_at" timestamptz [default: `now()`, note: 'Timestamp when the user was created']
  "modified_at" timestamptz [default: `now()`, note: 'Timestamp when the user was last modified']
  "deleted_at" timestamptz [note: 'Timestamp when the user was soft deleted']

  Indexes {
    tenant_id [type: btree, name: "users_tenant_id_idx"]
  }
  Note: 'Stores primary user information with status and invitation tracking'
}

Enum "account_status" {
  "created"
  "active"
  "idle"
  "inactive"
  "pending"
  "archived"
}

Enum "email_status" {
  "pending"
  "sent"
  "bounced"
}

Enum "user_status" {
  "invited"
  "active"
  "verified"
  "suspended"
}

Table "documents" {
  "id" int4 [pk, not null, increment]
  "title" text [not null]
  "content" text [not null]
  "metadata" jsonb [default: `{}`]
  "embedding" public.vector
  "created_at" timestamptz [default: `CURRENT_TIMESTAMP`]
  "updated_at" timestamptz [default: `CURRENT_TIMESTAMP`]
}

Ref "fk_accounts_tenant":"auth"."tenants"."id" < "auth"."accounts"."tenant_id" [delete: cascade]

Ref "fk_api_keys_tenant":"auth"."tenants"."id" < "auth"."api_keys"."tenant_id" [delete: cascade]

Ref "fk_api_keys_user":"auth"."users"."id" < "auth"."api_keys"."user_id" [delete: cascade]

Ref "fk_apps_owner":"auth"."users"."id" < "auth"."apps"."owner_id" [delete: set null]

Ref "fk_apps_tenant":"auth"."tenants"."id" < "auth"."apps"."tenant_id" [delete: cascade]

Ref "fk_auth_templates_brand":"auth"."brands"."id" < "auth"."auth_templates"."brand_id" [delete: cascade]

Ref "fk_auth_templates_tenant":"auth"."tenants"."id" < "auth"."auth_templates"."tenant_id" [delete: cascade]

Ref "fk_brands_domain":"auth"."domains"."id" < "auth"."brands"."domain_id" [delete: set null]

Ref "fk_brands_tenant":"auth"."tenants"."id" < "auth"."brands"."tenant_id" [delete: cascade]

Ref "fk_email_templates_brand":"auth"."brands"."id" < "auth"."email_templates"."brand_id" [delete: cascade]

Ref "fk_email_templates_tenant":"auth"."tenants"."id" < "auth"."email_templates"."tenant_id" [delete: cascade]

Ref "fk_emails_template":"auth"."email_templates"."id" < "auth"."emails"."email_template_id" [delete: set null]

Ref "fk_emails_tenant":"auth"."tenants"."id" < "auth"."emails"."tenant_id" [delete: cascade]

Ref "fk_emails_user":"auth"."users"."id" < "auth"."emails"."user_id" [delete: cascade]

Ref "fk_errors_tenant":"auth"."tenants"."id" < "auth"."errors"."tenant_id" [delete: cascade]

Ref "fk_errors_user":"auth"."users"."id" < "auth"."errors"."user_id" [delete: set null]

Ref "fk_logs_tenant":"auth"."tenants"."id" < "auth"."logs"."tenant_id" [delete: cascade]

Ref "fk_logs_user":"auth"."users"."id" < "auth"."logs"."user_id" [delete: set null]

Ref "fk_profiles_user":"auth"."users"."id" < "auth"."profiles"."user_id" [delete: cascade]

Ref "fk_role_permissions_permission":"auth"."permissions"."id" < "auth"."role_permissions"."permission_id" [delete: cascade]

Ref "fk_role_permissions_role":"auth"."roles"."id" < "auth"."role_permissions"."role_id" [delete: cascade]

Ref "fk_roles_tenant":"auth"."tenants"."id" < "auth"."roles"."tenant_id" [delete: cascade]

Ref "fk_scheduled_tasks_tenant":"auth"."tenants"."id" < "auth"."scheduled_tasks"."tenant_id" [delete: cascade]

Ref "fk_service_accounts_api_key":"auth"."api_keys"."id" < "auth"."service_accounts"."api_key_id" [delete: set null]

Ref "fk_service_accounts_tenant":"auth"."tenants"."id" < "auth"."service_accounts"."tenant_id" [delete: cascade]

Ref "fk_sessions_tenant":"auth"."tenants"."id" < "auth"."sessions"."tenant_id" [delete: cascade]

Ref "fk_sessions_user":"auth"."users"."id" < "auth"."sessions"."user_id" [delete: cascade]

Ref "fk_tenants_domain":"auth"."domains"."id" < "auth"."tenants"."domain_id" [delete: set null]

Ref "fk_user_roles_role":"auth"."roles"."id" < "auth"."user_roles"."role_id" [delete: cascade]

Ref "fk_user_roles_user":"auth"."users"."id" < "auth"."user_roles"."user_id" [delete: cascade]

Ref "fk_user_settings_user":"auth"."users"."id" < "auth"."user_settings"."user_id" [delete: cascade]

Ref "fk_users_invited_by":"auth"."users"."id" < "auth"."users"."invited_by" [delete: set null]

Ref "fk_users_tenant":"auth"."tenants"."id" < "auth"."users"."tenant_id" [delete: cascade]

Table "neon_auth"."users_sync" {
  "raw_json" jsonb [not null]
  "id" text [pk, not null]
  "name" text
  "email" text
  "created_at" timestamptz
  "updated_at" timestamptz
  "deleted_at" timestamptz

  Indexes {
    deleted_at [type: btree, name: "users_sync_deleted_at_idx"]
  }
}

Table "noclocks"."documents" {
  "id" int4 [pk, not null, increment]
  "title" text [not null]
  "content" text [not null]
  "metadata" jsonb [default: `{}`]
  "embedding" public.vector
  "created_at" timestamptz [default: `CURRENT_TIMESTAMP`]
  "updated_at" timestamptz [default: `CURRENT_TIMESTAMP`]
}

Table "noclocks"."query_cache" {
  "id" int4 [pk, not null, increment]
  "qry_text" text [not null]
  "qry_embedding" public.vector
  "document_ids" "int4[]" [not null]
  "frequency" int4 [not null, default: 1]
  "last_accessed" timestamptz [default: `CURRENT_TIMESTAMP`]
}


Advanced Usage: Tool Registration
The ellmer package allows you to register tools that can be used by the chat. Let's enhance our example by registering the extract_code function as a tool:

r
# Initialize a chat with OpenAI using the mermaid.js system prompt
chat <- ellmer::chat_openai(
  model = "gpt-4o",
  system_prompt = prompt_mermaid_sys(),
  api_args = list(temperature = 0)
)

# Register extract_code as a tool
chat$register_tool(
  ellmer::tool(
    extract_code,
    "Extracts code blocks from text",
    text = ellmer::type_string("Text containing code blocks"),
    lang = ellmer::type_string("Language of code block to extract")
  )
)

# Example code to pass to chat
example <- "starwars |>
  filter(species == \"Human\") |>
  select(name, height, mass)"

# Send the example code to the chat
resp <- chat$chat(prompt_mermaid_user(context = example))

# The chat can now use the extract_code tool directly
# Display the diagram
DiagrammeR::DiagrammeR(extract_code(resp, lang = "mermaid"))
Error Handling
It's important to handle errors gracefully in production code. Here's how you can implement robust error handling:

r
generate_mermaid_diagram <- function(code_snippet) {
  rlang::try_fetch({
    chat <- ellmer::chat_openai(
      model = "gpt-4o",
      system_prompt = prompt_mermaid_sys(),
      api_args = list(temperature = 0)
    )

    # Register extract_code as a tool
    chat$register_tool(
      ellmer::tool(
        extract_code,
        "Extracts code blocks from text",
        text = ellmer::type_string("Text containing code blocks"),
        lang = ellmer::type_string("Language of code block to extract")
      )
    )

    resp <- chat$chat(prompt_mermaid_user(context = code_snippet))
    mermaid_code <- extract_code(resp, lang = "mermaid")

    # Return both response and extracted code
    list(
      response = resp,
      mermaid_code = mermaid_code
    )
  },
  error = function(err) {
    cli::cli_alert_danger("Error generating diagram: {err$message}")
    NULL
  })
}
Caching for Production
For production use, implementing caching can significantly improve performance and reduce API costs:

r
# Create a simple in-memory cache
diagram_cache <- new.env(parent = emptyenv())

generate_cached_mermaid_diagram <- function(code_snippet) {
  # Create a hash of the code snippet to use as a cache key
  cache_key <- digest::digest(code_snippet)

  # Check if result is in cache
  if (exists(cache_key, envir = diagram_cache)) {
    cli::cli_alert_success("Using cached diagram")
    return(get(cache_key, envir = diagram_cache))
  }

  # Generate diagram
  result <- generate_mermaid_diagram(code_snippet)

  # Cache result if successful
  if (!is.null(result)) {
    assign(cache_key, result, envir = diagram_cache)
  }

  return(result)
}
Shiny Integration
Here's how you can integrate this functionality into a Shiny application:

r
# Create a Shiny module for interactive diagram generation
mermaidDiagramUI <- function(id) {
  ns <- shiny::NS(id)
  shiny::tagList(
    bslib::card(
      bslib::card_header("R Code Input"),
      shiny::textAreaInput(
        ns("code"),
        "Enter R code:",
        height = "200px",
        value = "starwars |>\n  filter(species == \"Human\") |>\n  select(name, height, mass)"
      ),
      shiny::actionButton(ns("generate"), "Generate Diagram")
    ),
    bslib::card(
      bslib::card_header("Generated Diagram"),
      shiny::uiOutput(ns("diagram"))
    )
  )
}

mermaidDiagramServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
    diagram_code <- shiny::eventReactive(input$generate, {
      shiny::req(input$code)
      cli::cli_alert_info("Generating diagram...")

      result <- generate_cached_mermaid_diagram(input$code)
      if (is.null(result)) return(NULL)

      result$mermaid_code
    })

    output$diagram <- shiny::renderUI({
      code <- diagram_code()
      if (is.null(code)) {
        return(shiny::p("No diagram generated yet."))
      }
      DiagrammeR::DiagrammeR(code)
    })
  })
}
Conclusion
This vignette demonstrates how to use the noclocksai package to generate Mermaid.js diagrams from R code snippets. The package provides pre-defined prompts and utility functions that make it easy to generate diagrams without having to write the prompts from scratch. By leveraging the ellmer package's chat interface, you can generate diagrams that represent the flow of your R code, making it easier to understand and document your data processing workflows.

